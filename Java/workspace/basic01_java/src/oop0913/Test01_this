package oop0913;

class Score{
	// ※ 하나의 .java파일에는 보통 하나의 클래스만 사용, 여러개 클래스를 사용시 하나의 클래스만 public으로 열어둔다
	
	// 멤버변수 field
	private String name = "손흥민";
	private int kor, eng, mat;
	private int aver;
	
	// 생성자 함수 constructor
	// 생성자 함수를 오버로딩(이름중복사용)하면 기본 생성자 함수가 자동으로 생성되지않고 따로 선언해주어야한다
	// => 기본 생성자 함수는 수동으로 강제 생성할것을 추천한다~! (복잡하게 외우느니 걍 수동으로 선언해놓고 코딩)
	public Score(){} // 기본 생성자 함수
	
	public Score(String name, int kor, int eng, int mat){
		// ↑ 위의 멤버변수와 생성자 함수 속 매개변수 이름과 같아도 사용가능(매개변수는 score함수 내에서만 살아있으니까)
		// 단 멤버 변수는 이 클래스 내에서는 다 살아있음
		// 프로그램이 길어졌을때 유지 보수를 위해 멤버변수와 지역변수(매개변수)를 통일하는것이 편하다 (같은 흐름 유지)
	
		// this.멤버변수 = 지역변수; 
		this.name = name;	
			// 밑 main class → Score함수에서 "김연아"값을 전달했으므로 김연아가 출력된다
		
		// 멤버변수 name을 지역변수 name에 대입
		this.kor = kor;
		this.eng = eng;
		this.mat = mat;
		
		this.aver = (kor+eng+mat)/3;
	
	}//score()end
	
	// 멤버함수 method
	public void disp() {
		String name = "박지성";		// disp속에서 name이라는 변수(지역변수)선언시 출력값이 지역변수로 바뀜
		System.out.println(name);   // (지역변수가없다면) 멤버변수 name이 출력된다(손흥민)
									// 지역변수 선언시 지역변수name이 출력(박지성) → 우선순위가 가장 높으니까
		
		// ★ 지역변수의 우선순위가 가장 높다 ★
		
		// 지역변수가 있는 상황에서 멤버변수에 접근을 하고 싶다면 this를 사용한다
		// System.out.println(this.name);		// 손흥민(멤버변수)
		// 지역변수와 멤버변수의 이름을 동일하게 주어도 되는 이유 = this로 멤버변수 접근 가능하니까 
		
		System.out.println(this.name); 	// 밑 Score함수에서 "김연아"값을 전달했으므로 김연아가 출력된다
		System.out.println(this.kor);
		System.out.println(this.eng);
		System.out.println(this.mat);
		System.out.println(this.aver);
	}//disp()end
	
}//class end


public class Test01_this {

	public static void main(String[] args) {
		/*
		  		● this
		  		  → 클래스가 자신을 가리키는 대명사
		  		  → 일반 지역변수와 멤버 변수를 구분하는 용도로 사용
		  		  
		  		  ○ this()
		  		   → 자신의 생성자 함수를 호출 
		  		  
		*/
		
		// ★ 하나의 class (여기선 Scroe class)가 순차적으로 진행된다
		
		Score one = new Score("김연아", 50, 60, 75);		// = object, 객체, instance 
		// ↑ 참조변수(변수) , Score함수의 주소값과 새로운 값을 저장 
		one.disp();
		// disp 함수 속 name은 멤버 변수의 값을 가지고 있기때문에 '손흥민'으로 출력된다

		Score two = new Score();
		// new Score()는 기본 생성자 함수라서(코드는없지만 프로그램은 있는걸로 인식함) 오류나면 안되는데
		// 생성자함수를 오버로딩하면 기본생성자함수가 자동생성이 안되기때문에 따로 선언해주어야한다
		
		Score three = new Score("무궁화", 10, 20, 25);
		three.disp();
		
		
		/*
		 		● 객체 지향 프로그램 특징  
		 			○ 은폐·은닉(private) 
					○ 캡슐화(하나의 정보를 한 캡슐안에 다 저장했다는 뜻)
					  	→ ex. Score three = new Score("무궁화", 10, 20, 25);
					    → 무궁화의 정보를 하나의 캡슐(three) 다 저장한 모양새 
		*/					  
							
		// 객체가 참고하고 있는 주소 확인
		System.out.println(one.hashCode());
		System.out.println(two.hashCode());
		System.out.println(three.hashCode());
		
		// 객체 생성(메모리 할당)여부 확인 : null값이 아닌지 확인
		System.out.println(one);
		System.out.println(two);
		System.out.println(three);
		
		// 객체 생성이 제대로 이뤄지지 않은 경우
		one = null;
		System.out.println(one);	// null
		
//------------------------------------------------------------------------------------
		
		Score kim  = new Score ("봉선화", 10, 20, 30);	// ex. 100번지(주소값)
		Score lee  = new Score ("라일락", 40, 50, 60);	// ex. 200번지
		Score park = new Score ("진달래", 70, 80, 90);	// ex. 300번지
		
		// 객체배열
		// 위 값을 하나의 배열안에 모을 수 있음 = 객체(class)도 배열을 가질 수 있다
		// ↓ 해당 주소값이 가지고 있는 자료형을 넣는다
		Score [] score = {
						new Score ("오필승", 	11, 22, 33)
					   ,new Score ("코리아",  44, 55, 66)
					   ,new Score ("대한민국", 77, 88, 99)
				   };
		/*
        		+---------+---------+--------+
        		|  #100   |  #200   |  #300  |
        		+---------+---------+--------+
         		 score[0]   score[1]  score[2]
		*/
		
		score[0].disp();
		// score배열의 0번째 행이 가지고있는 정보를 disp함수로 호출하기 
		score[1].disp();
		score[2].disp();
		
		// ↓ 반복문으로 일괄처리
		for (int i=0; i<score.length; i++) {
			score[i].disp();
		}
		
		
		
	}//main() end
}//class end
