package oop0908;	// ← 현재 작성중인 클래스(Test01_class)의 저장 위치. 한번만 선언한다

// 클래스를 사용하려면 반드시 해당 클래스의 저장 위치(package)를 선언해야한다 
// → 동명의 클래스들이 있을 수 있기 떄문


// 프로그램이 커질수록 임포트는 늘어날 수 밖에 없다 : 기본으로 제공되는 클래스들 임포트해서 사용하는것
import java.io.*;  	// → java 안에 io안에 모든 파일(*) 사용 가능
import java.sql.*;
import java.util.Arrays; 	// → 특정 클래스를 직접 선언할수도 있음
import java.awt.*;			// GUI 관련 클래스 : 자바에서도 front단을 꾸밀 수 있다 
import javax.swing.*;		// GUI 관련 클래스
import oop0907.*;			// 내가 만든 클래스도 임포트 가능

/*
 	Access Modifier 접근제어·접근수정
 		○ private	   : 비공개 : 클래스 내부에서만 접근 가능 : 은닉 가능(객체지향언어의 특징) 
 		○ package      : 생　략 : 현재 package(oop0908)안에서만 접근 가능(기본이라 아무것도 안적혀있으면 패키지가 생략된것)
 		○ protected    : 상속관계에 있는 클래스가 다른 패키지에 있는 경우(상-하위 클래스가 각기 다른 패키지에 있는 경우)
 		○ public	   : 공　개 : 현재 프로젝트(basic01_java)내에서 모두 접근 가능
 	
 	→ 아래로 내려올수록 크기가 큼 (public안에 protected안에 package안에 private)
 				(= 접근범위가 넓어짐)
 	→ 클래스에도 함수에도 변수에도 앞에 붙을 수 있다. 
 			ex. -- 클래스
 				public class Test01_class
 				-- 멤버변수
 				public String name;
 				private int aver;
 				-- 멤버함수
 				private void view() {}
 				public void disp() {}
 				
 	원래 한 파일(.java)안에 하나의 클래스만 작성한다. (지금은 문법공부니까 여러개)
 	    → 밖에서 클래스가 전부 보이지않고 하나만 보이기 때문에
 	클래스 안에 클래스 가능 (inner class)
 	
 	한 클래스 내부 멤버들간에는 Access Modifier 상관없이 접근 가능 
*/


class Sungjuk { 	// 맨 앞에 package 생략 = package class Sungjuk {} 
					// ★클래스 명의 첫글자는 늘 대문자로 지정한다
	
	// 멤버변수 field
	public String name;		// 클래스 외부에서 접근가능 
	int kor, eng, mat;		// package 생략된 것, oop0908패키지 내부에서만 접근 가능 
	private int aver;		// Sungjuk클래스 내부에서만 접근 가능
	
	// 멤버함수 method
	private void view() {} //view end
	
	void calc() { 	// 앞에 package 생략 (현 패키지안에서만 접근 가능)
					// 한 클래스 내부 멤버들간에는 Access Modifier 상관없이 접근 가능
		view();
		aver=(kor+eng+mat)/3;
	} // calc end
	
	public void disp() {
		System.out.println(name);
		System.out.println(kor);
		System.out.println(eng);
		System.out.println(mat);
		System.out.println(aver);
	} // disp end
	
}// class end 


//--↓하나의 클래스 : Test01_class.class----------------------------------------------------------------
public class Test01_class {

	public static void main(String[] args) {
		/*            	
			● 클래스와 객체 (Class and Object)
			  (클래스 설계시 구조를 그냥 받아드리고 짜야한다. 구조에 대한 의문갖지말기~)
			★ 클래스 명의 첫글자는 늘 대문자로 지정한다
			- 구성멤버 : 멤버변수 field, 멤버함수 method : 클래스 안에 선언된 변수,함수들
					   → 대체적으로 변수 후 함수를 선언한다
			
			(왠만한 설계는 DB에서 고민)

		*/
		
		// System.out.println(Math.PI);			// 멤버 변수    field
		// System.out.println(Math.abs(-5));	// 멤버 함수()  method
		
		// 클래스도 변수처럼 반드시 메모리를(RAM메모리) 할당하고 사용해야한다 = new 연산자
		// new 클래스명() = 객체 object = 인스턴스 Instance  
		
		// 객체지향프로그램 object oriented program
		/*
		// 기본 자료형
		int a=3;  		// int : 4byte
		
		// 참조 자료형(reference) → 클래스 
		// RAM의 heap영역에 메모리가 할당되고 주소값이 발생된다 
		new Sungjuk();	// 객체 object
		
			- 그냥 상식이라 적어놓음 - 
		 	1세대언어 어셈블리어
		 	2세대		자바, V, VC
		 	3세대 	파이썬, JS
		*/
		// 참조변수(reference) : 메모리가 할당된 곳의 주소를 기억한다
		Sungjuk sj = new Sungjuk(); // 변수에 주소값 자체를 저장할 수 있다 : 그러면 그 저장된 것의 메모리까지 가져옴
		// ↑ 자료형을 해당 주소를 가진 클래스 명으로
		// sj라는 참조변수에 Sungjuk라는 클래스의 주소를 저장하는것 → 그 틀을 가지고 와서 원하는 재료를 넣어 새로운 붕어빵을 만들수 있도록
		
		// . 연산자 (c언어에서 * pointer연산자)
		// → 참조 변수를 통해 객체에 접근하는 연산자
		sj.name = "손흥민";
		sj.kor = 100;
		sj.eng =  95;
		sj.mat =  90;
		// sj.aver = !error → aver변수는 private로 선언했기때문에 다른 클래스에서는 노출되지 않음(접근불가)
		
		sj.calc(); 
		sj.disp();
		// sj.view = !error → private로 선언한 함수라 다른 클래스에서 보이지 않음(접근불가)
		
//--------------------------------------------------------------------------------------------------
		/*
		 	class Sungjuk{} : 붕어빵 틀 
		 	Sungjuk one = new Sungjuk(); : 참조변수 : 찍어내는 붕어빵들 : one이라는 붕어빵, two라는 붕어빵
		 	one.name = "박지성"; : 붕어빵 속재료 
		*/
		
		
		Sungjuk one = new Sungjuk(); //one에 성적 주소 저장
		one.name = "박지성";	
		// one이라는 참조변수가 성적클래스의 name을 참조해서 같은 틀에다가 박지성이라는 값을 저장하겠다
		one.kor = 20;
		one.eng = 30;
		one.mat = 35;
		one.calc();
		one.disp();
		
		Sungjuk two = new Sungjuk(); 
		two.name = "김연아";
		two.kor = 100;
		two.eng =  95;
		two.mat =  90;
		two.calc();
		two.disp();		
		
//--------------------------------------------------------------------------------------------------		
		
		// 해쉬코드 : 참조변수가 참조하고있는 객체의 주소값을 확인할 수 있도록 하는 함수
		System.out.println(one.hashCode());
		System.out.println(two.hashCode());
		
		int a=3;
		int b=a;
		
		Sungjuk tmp = two;
		// two의 자료형이 Sungjuk이기때문에 거기에 맞춰서 변수선언을 해야한다
		
		System.out.println(tmp.hashCode()); 
		// two와 주소가 같음 (tmp가 two를 담은 변수니까)
		
		tmp.disp();
		
		
	}//main end
}//class end
