package oop0920;

import java.io.FileInputStream;

public class Test01_Input {

	public static void main(String[] args) {
		/*
		      ● Input ; 파일 입출력(.txt로 출력하기)
		      → Console 창 : 개발자만 보는 실시간 출력 화면
		      → In·Output을 이용하여 '파일'에다가 출력할 수 있다
		      → Reader/Writer  |  Input/Output stream → 같은 계열로 움직여야 데이터 손실률을 낮춘다
		      
		      → file : .pdf .xls .csv .ppt .txt .jpg ···.
		      (java SE에서 제공되는 class를 응용하여 원하는 파일로 출력하는게 가능은 하다)	      
		      → .txt , .csv(데이터를 ,로 묶은 메모장같은 기능)은 출력 가능 
		      → .ppt 파일 경우 슬라이드 단위로 가져온다
		      
		      → 메모장 파일은 byte 단위·char 단위 기준으로 가져올 수 있다 
		      (byte : 1바이트 할당 ; 한글 다 깨짐  |  char : 2바이트 할당)
		      
		      
		      → view(front)단에 관련된 GUI class는 java.awt에 몰려있다 
		        (참조 : https://docs.oracle.com/javase/8/docs/api/)
		*/

		// 1. byte기반(1바이트할당) 메모장파일 입출력 → 한글깨짐
		// String filename = "data.txt"; → data.txt와 현재 Test01_input.java가 같은 경로내에 있기때문에 경로를 적지 않아도 된다
		String filename = "I:/java202207/workspace/basic01_java/src/oop0920/data.txt";
		FileInputStream fis = null;
		//               ↑ 에 파일을 담아봐야 메모장파일인지 알 수 있다 | try안에서 파일을 열어봐야 있는지 없는지 안다 = 그 전까진 filenaem은 그저 String임
		// FileInputStream은 바이트단위로 불러오기때문에 한글이 깨짐
		// → 파일을 open/close (여닫기)를 반드시 해줘야한다(finally 안 try문으로 닫아준다)
		
		try {
				fis = new FileInputStream(filename);
				//fis에 메모장파일을 담기 완료(간단하다)
				
				while(true) {
					
			    //read() → 커서가 1byte씩 읽어서 불러온다 ; -1이되면 가장 마지막 글자를 읽는다 (int로 리턴됨)
				//       → 맨 앞 1byte읽고 다음 1byte 읽는 식
						int data = fis.read();    // 1byte 읽기 = 반복문안에서 1byte씩 계속 읽어간다 (한글은 2바이트할당)
						if(data == -1) {		  // -1 = 파일의 끝(End Of File)인가?
							break;			      // => 커서(data)가 -1(파일의끝)에 도달했다면 반복문을 빠져나온다
						}	
						//System.out.println(data); → int 리턴이라 숫자로 출력됨
						System.out.printf("%c", data);
						// data(커서)가 가리키는 아스키코드(int)를 char로 형변환(%c)하면 한글은 아스키값이 없기때문에 깨짐
				}//while end
								
				
		} catch(Exception e){
		
			System.out.println("파일 불러오기 실패 : " + e);
		
		}finally {
			
			//(다 쓴) 자원 반납 → 정상적으로 파일이 열려도 close, 비정상적으로 프로그램이 종료되어도 close를 finally안에 작성한다
			try {
				if (fis != null) { fis.close(); } // = fis파일이 null이 아니라면 close한다(null은 close할 필요 없음)
			} catch(Exception e) {}
		
		}// end
		// 파일을 입출력할땐 항상 exception 예외처리를 해야한다(파일이 없어서 오류가 나도 프로그램은 정상 종료해야한다)
		
		
		
		
		
		
	}//main() end
}//class end
