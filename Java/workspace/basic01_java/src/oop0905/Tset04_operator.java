package oop0905;

public class Tset04_operator {

	public static void main(String[] args) {
		// 【 연산자 】
		// 산술·비교(관계)·논리 연산자
 		// 대입·삼항·1증감연산자 
		// 자바 스크립트 참조
		
		System.out.println(5/3);	// 1
		System.out.println(5%3);	// 2
		
		System.out.println(3/5);	// 0
		System.out.println(3%5);	// 3
		// 5 = int, 3 = int ★ 정수끼리의 계산에서 실수는 절대 발생하지 않는다 
		
		System.out.println(3.0/5.0); 	// 0.6
		System.out.println(3/5.0);      // 0.6
		// ★ 실수형끼리의 계산 | 실수와 정수의 계산은 실수값이 나온다
		System.out.println(3.0/5);		// 0.6
		System.out.println(3/5.);		// 0.6
		// 소수점 뒤에 숫자가 없어도 0으로 알아서 계산된다 5. = 5.0
		
//------------------------------------------------------------------------------------------------
		
		// bit연산자
		// 1. 비트 곱 &, 비트 합 |
		System.out.println(5&3);    	// 1 : 비트 곱
		System.out.println(5|3);  		// 7 : 비트 합 
		/*
		 	2진수 : 0 | 1		→ computer 신호언어
		 	8진수 : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7
		   10진수 : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 	→ 자연어
		   16진수 : 0 | 1 | 2 | 3 | 4 | 5 | ··· 14 | 15
		           → 10~15는 0-5의 조합이기때문에 수가 아닌 문자로 표현한다 
		  		   0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | a | b ··· e | f
		  
		  10진수 5를 2진수로 바꾸면 101
		  
		  8421을 알면 2진수 변환이 쉽다 
		  2의 3승 = 8
		  2의 4승 = 16
		  		 = 32
		  		 = 64
		  		 = 128
		  		 = 516
		  		 
		  					128   64 	32 	16 	8 	4 	2 	1
		  ex. 5를 2진수 변환							1 	0 	1 
		  	  3을 2진수 변환								1 	1
		  	  9를 2진수 변환						1	0	0	1
		  	  35를  	  변환				 1	 0  0   0   1   1
		  	  
		  	  더해서 값이 나오는 숫자까지만 표현
		  	  필요한 숫자는 1 아니면 0
		  	  5=4+1 : 4와 1만 1로 표현 사이의 2는 0으로 = 101 
		  	  3=2+1 : 2와 1만 11로 표현 = 11 
		  	  9=8+1 : 8,1 : 1 / 4,2 : 0 = 1001
		  	  
		  	  자연수를 컴퓨터로 표현하려면 8자리로 표현되어야한다
		  	  : 한 자리수당 bite로 표현 : 8bit = 1byte 
		  	  
		  	  5 = 101  →   00000101		   	  00000101
		  	  3 = 11   → & 00000011			| 00000011
		  	  			------------	   -------------
		  	  			(곱)00000001		   (합)00000111
		  	 
		  	  	
		  보수 : 반대가 되는 수 
		        0 ↔ 1 
		 */
		 
		// 2. 비트 부정 연산자 ~ 
		System.out.println(~5);		// -6
		
		// 3. shift 연산자 <<(left shift), >>(right shift)
		// 					   ↓ 3 = 이동bit수 
		System.out.println(16<<3);	// 128 : left shift
		// 16*2의 3승 = 16*8	= 128
		System.out.println(16>>3);	// 2   : right shift
		// 16/2의 3승 = 16/8	= 2
		/*
		 						 128  64  32  16  8   4  2  1
		  	16을 2진수로 변환 					1	0	0	0	0
		  	=   	00010000			00010000
		  		<<3 10000			>>3    00010
		  		(앞 3칸 000이 잘림)		(뒤 3칸 000이 잘림) : 빈칸은 0으로 다시 채움 = 8bit니까
		  			10000000			00000010
		  
		 */
		
		//∴ 비트연산자는 하드웨어쪽 우리는(소프트웨어쪽) 논리연산자를 사용해야한다 : 논리합, 논리곱 등
	}// main() end

}// class end
