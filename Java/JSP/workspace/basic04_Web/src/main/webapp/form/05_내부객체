<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>05_내부 객체.jsp</title>
</head>
<body>
<%
	/*
		● [JSP페이지 실행 과정]
		- tomcat WAS가 개발자가 만든 .jsp를 .class로 읽어서 .html로 화면에 출력해준다
		= 톰캣 WAS에 의해서 .java와 .class가 자동으로 생성된다
		ex. hello.jsp → hello_jsp.java(톰캣에 의해 자동 생성) → hello_jsp.class(톰캣에 의해 자동변환)
		    → hello_jsp.html(서버 위에서 실행시키면 자동 변환해서 인터넷 페이지로 출력해줌)
		※ 스파게티 코드때문에 .java를 개발자가 임의로 만들 가 있다
		
		● [hello_jsp.java 소스 저장 경로]
		  I:\java202207\workspace
						\.metadata
						\.plugins
						\org.eclipse.wst.server.core
						\tmp0
						\work
						\Catalina
						\localhost
						\basic04_web
						\org
						\apache
						\jsp
						\form
							→ hello_jsp.class
							→ hello_jsp.java

		● [JSP 내부객체]
		- 톰캣 서버에 의해 자동으로 생성된 객체
		- new 연산자로 별도의 객체 선언(메모리 할당)하지 않고 가져다 사용할 수 있다 (ex. out.print();)
		
		○ out 			: 출력 객체
						→ JspWriter out = null;
		
		○ request   	: 사용자가 요청한 내용(정보)를 받아서 관리하는 객체(변수)
						→ HttpServletRequest request
		○ response  	: 요청한 사용자에게 응답할 내용을 관리하는 객체
						→ HttpServletResponse response
		(→ public void _jspService(request,response){})
		
		○ session		: 요청한 사용자를 개별적으로 구분하기 위한 객체
						= 사용자 개인 공간(ex.내 사물함) → 로그인 로그아웃시 사용 
						→ HttpSession session = null;
		
		○ application	: 모든 사용자가 공유하는 값 또는 서버에 대한 정보를 관리하는 객체 
						= 공용 공간(ex.강의실)
						→ ServletContext application;
		
		○ pageContext	: JSP, JSTL, EL 등 현재 페이지 내에서 서로 다른 문법과의 값을 교류할 수 있는 객체
						= 프로젝트 진행시 여러 페이지가 같은 값을 공유해야하기도 하지만 때로는 하나의 정보를 하나의 페이지만 가져야할때 사용한다??
						→ PageContext pageContext;
				    
	*/	 


%>
</body>
</html>
