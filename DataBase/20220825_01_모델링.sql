-- 파일 → 새로만들기 → 데이터베이스 계층 → 데이터베이스 파일
-- i:\java202207\database\20220825_01_모델링
-- 테이블은 오라클서버에 저장되므로 같은 이름으로 연습할거면 drop으로 지우고 해야함
//////////////////////////////////////////////////////////////////

    【 SQL 순서 】 
        - 모델링 작업 → 테이블 작업 → sql문 → 처리문
        
    【 NC학습모듈 】
        - 데이터 입출력 구현 - 논리 데이터모델 저장소, (검증:17Page/86Page)

    【 관계형 DB 모델링 순서 】      
        ο 업무 분석 
            - ER-WIN : 관계형 DB 모델링을 도식화 할 수 있는 프로그램(그림으로 보여줌)
        ο 테이블 시나리오
        ο 테이블 정의서
        ο SQL문 
        
    【 학사관리 업무분석 】 
        - 1. 학생이 수강신청을 한다
        - 1-1. 수강신청한 강의의 목록을 본다
        - 1-2. 수강 신청완료한 강의들의 총 학점을 본다.
        
        - 2. 특정 강의를 누가 신청했는가(해당 강의를 수강신청한 학생들 목록)
        
        → 학생 / 강의 / 수강신청 테이블이 필요 (디테일하게하면 교수정보 등도 필요-우리는 안함)
        → 위 세가지 테이블만 있으면 강의 목록이나 학생 목록, 총 학점 등은 select로 보여주면 됨
        
        ο 한명의 학생을 두고 어떤 시나리오가 나오는가 

        학생                       과목
         1                          N
         --→ 한명의 학생이 여러개(n개)의 과목을 수강할 수 있음
         N                          1
         --→ 한개의 과목도 여러명(n명)의 학생이 들을 수 있음
         ∴  다:다 관계(n:m관계) = 1:N 관계 (1:1관계도 있음 ex.회사원:부서)
             두 테이블을 매칭시킬때 다:다관계는 반드시 중간 테이블이 필요하다(엑셀1단계에서 잘못된 테이블)
             = 반드시 교차테이블이 나와야한다.
             → 학사관리던 영화예매던 다:다관계라면 테이블 구조는 흡사하다(주제만 바꾸는 수준)
        
        ο 다:다 관계
--                [교차테이블]
        학생          수강          과목        
        회원          예매          영화(좌석이 상품이 된다)
        회원          구매          상품
                 --→ 장바구니
         1             N            1  
  
//////////////////////////////////////////////////////////////////

        ο 데이터베이스내의 테이블은 최소한의 의미(주제)를 가지는 테이블로 분리해서 구성하되,
          그 테이블에 있는 컬럼을 연결한 것이다.
                - 부모테이블: Primary Key 기본키 : PK
                - 자식테이블: Foreign Key 외래키 : FK
                → Foreign Key로 두 테이블간의 데이터 무결성(결점이 없는)을
                   강제할수 있으며, JOIN작업으로 원하는 작업을 처리한다.
                ※ 부모테이블과 자식테이블의 데이터 타입과 길이가 같아야한다. 
                    ex 학생테이블(PK) : 학번 : char(10) - 수강테이블(FK) : 학번 : char(10)
                
         
         
        ο 개체 무결성
                - 기본키에 속해 있는 속성은 NULL값을 가지지 못한다
                - 기본키는 레코드간에 유일한 식별자이므로 물리적으로 NULL값이 올 수 없다

 

 

 

         
        ο 참조무결성(FK제약조건)
                - 테이블은 참조할 수 있는 외래키 값을 가질 수 있다
                -  컬럼에 적용되는 3가지 제약조건
                ex.     not null
                        no change->함부로 변하면 안됨
                        no duplicate

        ο 표로 정리 
---------------------------------------------------------------------------
          부모테이블                              자식테이블
---------------------------------------------------------------------------

입력      상관없음                               반드시 부모테이블에 있는
                                                데이터가 입력된다.

 
수정      수정하려는 데이터가                     부모테이블에 존재하는          -- 조건으로 주는것이므로
          자식테이블에서 참조하고                 다른데이터로 변경 가능         -- 개발자 재량이다
          있는지 검증

삭제      삭제하려는 데이터가                     제약없다.
         자식테이블에서 참조하고
         있는지 검증

---------------------------------------------------------------------------

         ο 정규화(Normalization)
                - 중복성을 최소화하고 정보의 일관성을 보장하기 위한 개념
                - 정규화의 목적
                        ㆍ데이터베이스의 변경시 이상 현상 제거
                        ㆍ데이터베이스 구조 확장시 재 디자인 최소화
                        ㆍ사용자에게 데이터 모델을 더욱 의미있게
                        ㆍ다양한 질의 지원

                - 정규화의 종류
                        ㆍ제1정규화 : 모든 속성은 반드시 하나의 값을 가져야 함 (원자값)
                        ㆍ제2정규화 : 모든 속성은 반드시 기본키 전부에 종속되어야 한다(기본키 일부에만 종속되어서는 안됨)
                        ㆍ제3정규화 : 기본키가 아닌 모든 속성 간에는 서로 종속될 수 없다(속성 간 종속성 배제)

////////////////////////////////////////////////////////////////// 
         
         ο foreign key
                - 동일한 테이블 또는 다른 테이블에서 기본키 또는 고유키를 참조하는 제약 조건
                - on delete cascade 부모테이블의 행이 삭제되는 경우 자식테이블의 종속행을 삭제
                - on delete set null 부모테이블의 행이 삭제되는 경우 종속 외래키 값을 널로 변환
                - 부모:Primary Key 기본키 <---> 자식:Foreign Key 외래키
                
                ex. 수강테이블 제약조건
                        create table tb_sugang(
                           sno    number(3)  not null
                          ,hakno  char(5)    not null
                          ,gcode  char(4)    not null
                    
                          ,primary key(sno)                                 --sno칼럼 기본키
                          ,foreign key(hakno) references tb_student(hakno)  --hakno칼럼은 부모테이블(학생)의 hakno 참조
                          ,foreign key(gcode) references tb_gwamok(gcode)   --gcode칼럼은 부모테이블(과목)의 gcode 참조
                           on update cascade                                --부모테이블의 값이 수정되면 자식테이블 값도 같이 수정
                           on delete no action                              --부모테이블의 행이 삭제되더라도 자식테이블은 삭제되지 않음
                        );

                ex. 성적테이블 제약조건
                       create table sungjuk(
                          sno   int         not null,
                          uname varchar(20) not null,
                          kor   int         not null,
                          eng   int         not null,
                          mat   int         not null,
                          aver  int         default 0,
                          addr  varchar(50),
                          wdate date        default sysdate,
                          
                          primary key(sno),
                          check(addr in ('Seoul','Jeju','Suwon','Busan'))  
                          -- 제약조건을 한번에 줄 수도 있다 
                       );        
                            
                            
                            
        
        